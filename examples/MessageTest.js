"use strict";
exports.__esModule = true;
var complextypes_pb_1 = require("./_out/examplecom/services/complextypes/complextypes_pb");
var names_pb_1 = require("./_out/examplecom/common/names_pb");
var jspb = require("google-protobuf");
var SimpleString = complextypes_pb_1.SomeComplex.SimpleString;
var simple_pb_1 = require("./_out/examplecom/simple_pb");
var any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
do {
    var outerOne = new complextypes_pb_1.OuterMessage();
    outerOne.setSomeString("this_is_some_string");
    var innerOne = new names_pb_1.CommonName();
    innerOne.setName("my_common_name");
    outerOne.setSomeCommonName(innerOne);
    outerOne.setSomeEnum(complextypes_pb_1.SomeEnum.VALUE2);
    outerOne.setSomeNamesEnum(names_pb_1.NamesEnum.SECOND_NAME);
    var outerTwo = new complextypes_pb_1.OuterMessage();
    outerTwo.setSomeString("this_is_some_string");
    var innerTwo = new names_pb_1.CommonName();
    innerTwo.setName("my_common_name");
    outerTwo.setSomeCommonName(innerTwo);
    outerTwo.setSomeEnum(complextypes_pb_1.SomeEnum.VALUE2);
    outerTwo.setSomeNamesEnum(names_pb_1.NamesEnum.SECOND_NAME);
    console.log("are equal: " + jspb.Message.equals(outerOne, outerTwo));
} while (false);
do {
    var outerOne = new complextypes_pb_1.OuterMessage();
    outerOne.setSomeString("this_is_some_string");
    var innerOne = new names_pb_1.CommonName();
    innerOne.setName("my_common_name");
    outerOne.setSomeCommonName(innerOne);
    outerOne.setSomeEnum(complextypes_pb_1.SomeEnum.VALUE2);
    outerOne.setSomeNamesEnum(names_pb_1.NamesEnum.SECOND_NAME);
    var outerTwo = new complextypes_pb_1.OuterMessage();
    jspb.Message.initialize(outerTwo, outerOne.toArray(), 0, -1, null, null);
    console.log("are equal: " + jspb.Message.equals(outerOne, outerTwo));
} while (false);
do {
    var someComplex = new complextypes_pb_1.SomeComplex();
    var simp1 = new SimpleString();
    simp1.setSimple("simple-1");
    someComplex.addSomeResponses(simp1);
    var simp2 = new SimpleString();
    simp2.setSimple("simple-2");
    someComplex.addSomeResponses(simp2);
    var asObjectList = jspb.Message.toObjectList(someComplex.getSomeResponsesList(), SimpleString.toObject, false);
    console.log("SomeComplex.asObject", asObjectList);
    var extInfo = new jspb.ExtensionFieldInfo(105, { someExtSimp: 0 }, complextypes_pb_1.SomeComplex.SimpleString, complextypes_pb_1.SomeComplex.SimpleString.toObject, 0);
    var someSimpleString = new complextypes_pb_1.SomeComplex.SimpleString();
    someSimpleString.setSimple("this-is-an-extension-string");
    someComplex.setExtension(complextypes_pb_1.someExtSimp, someSimpleString);
    var someAnotherString = new complextypes_pb_1.SomeComplex.AnotherString();
    someAnotherString.setAnother("this-is-another-extension-string");
    someComplex.setExtension(complextypes_pb_1.SomeComplex.someExtAnother, someAnotherString);
    var toObjHolder = { someKey: 567 };
    jspb.Message.toObjectExtension(someComplex, toObjHolder, complextypes_pb_1.SomeComplex.extensions, complextypes_pb_1.SomeComplex.prototype.getExtension, false);
    console.log("toObjHolder", toObjHolder);
    console.log("someComplex.toObject", someComplex.toObject());
    var serialized = someComplex.serializeBinary();
    // Do the extensions survive serialization? (i.e. were they applied properly?)
    var deserialized = complextypes_pb_1.SomeComplex.deserializeBinary(serialized);
    console.log("deserialized.someComplex.toObject", deserialized.toObject());
} while (false);
do {
    var simp1 = new SimpleString();
    simp1.setSimple("simple-1");
    var someSimple = new simple_pb_1.MySimple();
    var someAny = new any_pb_1.Any();
    someAny.pack(simp1.serializeBinary(), "examplecom.services.complextypes.SimpleString");
    someSimple.setSomeAny(someAny);
    var serialized = someSimple.serializeBinary();
    var deserialized = simple_pb_1.MySimple.deserializeBinary(serialized);
    var desAny = deserialized.getSomeAny();
    var reSimple = desAny.unpack(SimpleString.deserializeBinary, "examplecom.services.complextypes.SimpleString");
    console.log("Any unpacked string: " + reSimple.getSimple());
} while (false);
